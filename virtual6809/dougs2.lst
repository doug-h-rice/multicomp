0001                         **************************************************
0002                         *
0003                         *
0004                         * 6809 dabble to try 6809 assembler on Cyclone FPGA
0005                         *
0006                         * http://atjs.mbnet.fi/mc6809/#Emu - Sbc6809 - sbc09.tar.gz
0007                         * Assembled :-
0008                         * For Windows, I downloaded asm6809-2.12-w64 from http://www.6809.org.uk/
0009                         * For Linux I used as9
0010                         *
0011                         * I could single step the code using:
0012                         * http://atjs.mbnet.fi/mc6809/6809Emulators/6809.zip 
0013                         *
0014                         * This was easy to build using Fabrice Bellard's TCC and GCC on Linux. 
0015                         *
0016                         * Grand Searle's Multicomp for 6809 provides hardware to run my 6809 code.
0017                         * http://searle.wales/ FPGA -  Multicomp on Cyclone11 - 6809
0018                         *
0019                         * You need to install the Altera Quartus 13.0 free version.
0020                         *
0021                         * C:/altera/13.0sp1web/Multicomp/Microcomputer
0022                         *
0023                         * Grant's website havs spawned many projects
0024                         *
0025                         * This one is useful. Doug has ported Grants code to many FPGA boards.
0026                         * https://hackaday.io/LandBoards 
0027                         * https://github.com/land-boards - A vast 700MB download that provided a challenge.
0028                         * http://land-boards.com/blwiki/index.php?title=Main_Page
0029                         * https://www.youtube.com/channel/UCTemcBf9UzLwhLCaOMRJEqQ/videos
0030                         *
0031                         * Once the code was assembled, I found it was possible to load it into the FPGA.
0032                         *
0033                         * However the address needs ajusting as the ROM starts at $E000 to $FFFF.
0034                         * A simple C program was writeen to do this. hexROMadjust.c
0035                         *
0036                         ******************************************************
0037                         * doug2.asm
0038                         *
0039                         * Try out of 6809 assembler
0040                         *
0041                         * The cpu resets $FFFF
0042                         *
0043                         * Objectives
0044                         *
0045                         *	set up vectors
0046                         *	run start up code
0047                         *	run simple code
0048                         *
0049                         * usage:
0050                         *   ./as9 doug2.asm -l s19
0051                         *   6809/virtual doug2.s19
0052                         *	
0053                         * asm6809 --hex -l doug.lst -o doug.hex  doug.asm
0054                         *
0055                         * I need a utility to move the hex file. 
0056                         * The hex file is abosulte but I need to split the file to load into the devices
0057                         * The ROM is at 0XE000 to 0XFFFF in the memory map but is at 0X0000 to 0X1FFF in the device.
0058                         * The RAM is at 0X0000 to 0X3FFF in the memory map but is at 0X0000 to 0X3FFF in the device.
0059                         *
0060                         * as9 does not recognise \r and \n in strings
0061                         * as9 does not recognise FCN 
0062                         *
0063                         ******************************************************
0064                         *
0065                         *rem do_dougs6809dabble.asm.bat
0066                         *rem
0067                         *rem
0068                         *asm6809 --hex -l doug.lst -o doug.hex  doug.asm
0069                         *asm6809 --hex -l doug.lst -o doug.hex  dougs6809dabble.asm
0070                         *rem pause
0071                         *
0072                         *I wrote hexROMadjust to allow for ROM @0XE000 to 0XFFFF needs addesses from 0X0000 to 0X01FF 
0073                         *type doug.hex | hexROMadjust.exe 
0074                         *type doug.hex | hexROMadjust.exe > doug_2f.hex
0075                         *hexROMadjust doug.hex > doug_2f.hex
0076                         *
0077                         * Doug Gilliland's https://github.com/land-boards - A challenge to get working
0078                         *copy doug_1f.hex C:\altera\13.0sp1web\M6809_VGA_PS2_UART_IntRAM(16K)\output_files
0079                         *copy doug_2f.hex C:\altera\13.0sp1web\M6809_VGA_PS2_UART_IntRAM(16K)\output_files
0080                         *
0081                         *Grant Searle's
0082                         *copy doug_1f.hex C:\altera\13.0sp1web\Multicomp\Microcomputer\output_files
0083                         *copy doug_2f.hex C:\altera\13.0sp1web\Multicomp\Microcomputer\output_files
0084                         *
0085                         *pause
0086                         *
0087                         * With the altera\13.0sp1web installed it is possible to modify the ROM contents without rebuilding the .sof file.
0088                         *
0089                         * You can use the GUI, but it must be possible to automate this.
0090                         *
0091                         *Command line update ROM contents of Grants Multicomp
0092                         *rem cd C:\altera\13.0sp1web\Multicomp\Microcomputer>
0093                         *C:\altera\13.0sp1web\quartus\bin\quartus_stp -t C:\altera\13.0sp1web\Multicomp\Microcomputer\MicrocomputerCmd.qsf
0094                         *
0095                         *pause
0096                         *
0097                         *******************************************************
0098                         * modify ROM so it can be modified via the USB Blaster. 
0099                         * M6809_MY_ROM.vhd
0100                         *	GENERIC MAP (
0101                         *	..
0102                         *		init_file => "../../Microcomputer/output_files/doug_1f.hex",
0103                         *	..	
0104                         *		lpm_hint => "ENABLE_RUNTIME_MOD=YES,INSTANCE_NAME=ROM1",
0105                         *	..	
0106                         *		operation_mode => "ROM",
0107                         *	)
0108                         *
0109                         * 
0110                         * With the altera\13.0sp1web installed it is possible to modify the ROM contents without rebuilding the .sof file.
0111                         *
0112                         * You can use the GUI, but it must be possible to automate this.
0113                         *
0114                         * #C:\altera\13.0sp1web\quartus\bin\quartus_stp -t C:\altera\13.0sp1web\Multicomp\MicrocomputerMicrocomputerCmd.qsf
0115                         * #end_memory_edit
0116                         *
0117                         * begin_memory_edit -hardware_name "USB-Blaster \[USB-0\]" -device_name "@1: EP2C5 (0x020B10DD)"
0118                         * get_editable_mem_instances -hardware_name "USB-Blaster \[USB-0\]" -device_name "@1: EP2C5 (0x020B10DD)"
0119                         * update_content_to_memory_from_file -instance_index 0 -mem_file_path "C:/altera/13.0sp1web/Multicomp/Microcomputer/output_files/doug_1f.hex" -mem_file_type "HEX"
0120                         * end_memory_edit
0121                         *
0122                         *# C:\altera\13.0sp1web\quartus\bin\quartus_stp
0123                         *# Quartus II 32-bit SignalTap II
0124                         *# Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
0125                         *# Copyright (C) 1991-2013 Altera Corporation
0126                         *# quartus_stp -s
0127                         *# quartus_stp --tcl_eval <tcl command>
0128                         *
0129                         *# C:\Users\doug>C:\altera\13.0sp1web\quartus\bin\quartus_stp -s
0130                         *
0131                         *C:\altera\13.0sp1web\quartus\bin\quartus_stp -t C:\altera\13.0sp1web\Multicomp\MicrocomputerMicrocomputerCmd.qsf
0132                         
0133                         *Info (261000): get_editable_mem_instances -hardware_name "USB-Blaster \[USB-0\]" -device_name "@1: EP2C5 (0x020B10DD)"
0134                         *Info (261000): begin_memory_edit -hardware_name "USB-Blaster \[USB-0\]" -device_name "@1: EP2C5 (0x020B10DD)"
0135                         *Info (261000): get_editable_mem_instances -hardware_name "USB-Blaster \[USB-0\]" -device_name ""
0136                         *Info (261000): begin_memory_edit -hardware_name "USB-Blaster \[USB-0\]" -device_name ""
0137                         *Info (261000): get_editable_mem_instances -hardware_name "USB-Blaster \[USB-0\]" -device_name "@1: EP2C5 (0x020B10DD)"
0138                         *Info (261000): begin_memory_edit -hardware_name "USB-Blaster \[USB-0\]" -device_name "@1: EP2C5 (0x020B10DD)"
0139                         *Info (261000): update_content_to_memory_from_file -instance_index 0 -mem_file_path "C:/altera/13.0sp1web/Multicomp/Microcomputer/output_files/doug_1f.hex" -mem_file_type ""
0140                         *Info (261000): write_content_to_memory -instance_index 0 -content "<value string is too long to be displayed>" -content_in_hex -start_address 0 -word_count 8192
0141                         *
0142                         *
0143                         
0144                         *************************************************
0145                         * PC
0146                         * U
0147                         * S
0148                         * Y
0149                         * X
0150                         * D { A,B
0151                         * DP
0152                         * CC
0153                         *************************************************
0154                         * ../ROMS/6809/EXT_BASIC_NO_USING.hex
0155                         *
0156                         
0157                         *************************************************
0158                         * sec 1.0 JUMP vectors for Processor reset and interupts. 
0159                         *************************************************	
0160                         **
0161                         *	SWI2
0162                         *	SWI3
0163                         *	FIRQ
0164                         *	IRQ
0165                         *	SWI
0166                         *	NMI
0167                         *	RESET
0168                         **	
0169 fff2                     	ORG	$FFF2
0170                         * 	ORG	$00F2
0171                         	
0172 fff2 e1 7b               	FDB	SWI2rtn
0173 fff4 e1 7d               	FDB	SWI3rtn
0174 fff6 e1 7f               	FDB	FIRQrtn
0175 fff8 e1 81               	FDB	IRQrtn
0176 fffa e1 83              	FDB	SWIrtn
0177 fffc e1 85              	FDB	NMIrtn
0178 fffe e1 87              	FDB	RESETrtn
0179                         
0180                         
0181                         
0182                         * 	ORG   $0180
0183                         * CAT		FDB 0
0184                         * DOUG		FDB 0 	
0185                         	
0186                         
0187                         *************************************************
0188                         * sec 1.0 Start of real code
0189                         *************************************************	
0190 e000                     	ORG   $E000
0191                         
0192                         INIT
0193 e000 12                 	NOP
0194                         
0195                         *	*** load Stack pointer	
0196 e001 10 ce 00 80        	LDS	#$0080		
0197 e005 12                 	NOP
0198 e006 12                 	NOP
0199                         	
0200                         	
0201                         *
0202                         *	http://atjs.mbnet.fi/mc6809/Information/6809.TXT
0203                         *   http://atjs.mbnet.fi/mc6809/Information/6809.htm
0204                         
0205                         *	LDX	#$D200		
0206 e007 8e 02 00           	LDX	#$0200		
0207                         
0208                         * DEBUG code used to get 6809 on VGA card
0209                         * It was a struggle to get the FPGA to work
0210                         * Using the inbuilt logic analyser something was working
0211                         *
0212                         * It is possible to read and write the RAM and ROM using the USBBaster if enabled.
0213                         *
0214                         * write something to ram	
0215 e00a 12                 	nop
0216 e00b 86 20              	LDA #$20
0217 e00d 8e 13 00           	LDX #$1300
0218                         	
0219 e010 86 20              	lda	#$20
0220 e012 b7 01 01           	sta $0101
0221                         
0222 e015 86 31              	lda	#$31
0223 e017 b7 01 02           	sta $0102
0224                         	
0225 e01a 86 32              	lda	#$32
0226 e01c b7 01 02           	sta $0102
0227                         	
0228 e01f 86 33              	lda	#$33
0229 e021 b7 01 03           	sta $0103
0230                         	
0231 e024 86 34              	lda	#$34
0232 e026 b7 01 04           	sta $0104
0233                         	
0234                         * copy ram to ram. Can we see if it has moved.
0235                         	
0236 e029 b6 01 01           	LDA $0101
0237 e02c b7 01 11           	sta $0111
0238                         	
0239 e02f b6 01 02           	LDA $0102
0240 e032 b7 01 12           	sta $0112
0241                         
0242 e035 b6 01 03           	LDA $0103
0243 e038 b7 01 13           	sta $0113
0244                         	
0245 e03b b6 01 04           	LDA $0104
0246 e03e b7 01 14           	sta $0114
0247                         
0248 e041 b6 01 05           	LDA $0105
0249 e044 b7 01 15           	sta $0115
0250                         
0251                         
0252                         
0253                         LOOP_0A
0254                         
0255 e047 8e e3 a6           	LDX		#MSG12
0256 e04a bd e2 28           	JSR		SUB3a
0257                         
0258                         * block for  key press returns charater in A
0259 e04d bd e1 5a           	JSR SUB_WAIT_RX
0260                         
0261                         *	sta $FFD1
0262                         *	JSR SUBWAITTX
0263                         
0264                         	
0265                         *	
0266                         * print out string selected by key pressed
0267 e050 bd e1 c9           	JSR	SUB3_pick
0268                         *	JSR SUB4
0269                         
0270                         * tidy up.
0271 e053 bd e2 25           	JSR	SUB3
0272                         
0273 e056 7e e0 47           	JMP LOOP_0A
0274                         
0275                         
0276                         **************************************************
0277                         * SEC 1.0 Early test code write characters to the UART
0278                         **************************************************
0279                         
0280                         LOOPA
0281                         
0282                         * write character to UART at $FFD1, and check if TX buffer
0283 e059 86 44              	LDA #'D'
0284                         *	STA $FFD1
0285 e05b bd e1 65           	JSR SUBWAITTX
0286                         	
0287                         * try and wait for the TX buffer to empty
0288                         WAITTX1
0289                         
0290 e05e b6 ff d0           	LDA $FFD0
0291 e061 84 02              	ANDA #$02
0292 e063 27 f9              	BEQ	 WAITTX1
0293                         
0294 e065 86 61              	LDA #'a'
0295 e067 b7 ff d1           	STA $FFD1
0296                         
0297                         
0298                         * try and wait for the TX buffer to empty
0299                         WAITTX2
0300 e06a b6 ff d0           	LDA $FFD0
0301 e06d 84 02              	ANDA #$02
0302                         *	BNE	 WAITTX2
0303                         
0304                         
0305                         
0306                         **************************************************
0307                         * SEC 1.0 Early test code write characters to the UART
0308                         **************************************************
0309                         
0310                         *
0311                         * Subrouting was not returning.
0312                         * Memory did not work until another Int16K .vhd was used.
0313                         *
0314 e06f 86 31              	LDA #'1'
0315 e071 bd e1 65           	JSR SUBWAITTX
0316                         
0317 e074 86 32              	LDA #'2'
0318 e076 bd e1 65           	JSR SUBWAITTX
0319                         
0320 e079 86 33              	LDA #'3'
0321 e07b bd e1 65           	JSR SUBWAITTX
0322                         
0323 e07e 86 34              	LDA #'4'
0324 e080 bd e1 65           	JSR SUBWAITTX
0325                         
0326 e083 86 20              	LDA #' '
0327 e085 bd e1 65           	JSR SUBWAITTX
0328                         
0329 e088 86 44              	LDA #'D'
0330 e08a bd e1 65           	JSR SUBWAITTX
0331                         
0332 e08d 86 6f              	LDA #'o'
0333 e08f bd e1 65           	JSR SUBWAITTX
0334                         
0335 e092 86 75              	LDA #'u'
0336 e094 bd e1 65           	JSR SUBWAITTX
0337                         
0338 e097 86 67              	LDA #'g'
0339 e099 bd e1 65           	JSR SUBWAITTX
0340                         
0341 e09c 86 0d              	LDA #$0D
0342 e09e bd e1 65           	JSR SUBWAITTX
0343                         
0344 e0a1 86 0a              	LDA #$0A
0345 e0a3 bd e1 65           	JSR SUBWAITTX
0346                         
0347 e0a6 86 20              	LDA #' '
0348 e0a8 bd e1 65           	JSR SUBWAITTX
0349                         
0350 e0ab 86 20              	LDA #' '
0351 e0ad bd e1 65           	JSR SUBWAITTX
0352                         
0353 e0b0 86 20              	LDA #' '
0354 e0b2 bd e1 65           	JSR SUBWAITTX
0355                         
0356 e0b5 86 20              	LDA #' '
0357 e0b7 bd e1 65           	JSR SUBWAITTX
0358                         
0359                         
0360 e0ba 8e e3 a6           	LDX		#MSG12
0361 e0bd bd e2 28           	JSR		SUB3a
0362                         
0363                         *
0364                         * send esc[31m to change colour of text on screen.
0365                         *
0366 e0c0 86 1b              	LDA #27
0367 e0c2 bd e1 65           	JSR SUBWAITTX
0368                         
0369 e0c5 86 5b              	LDA #'['
0370 e0c7 bd e1 65           	JSR SUBWAITTX
0371                         
0372 e0ca 86 33              	LDA #'3'
0373 e0cc bd e1 65           	JSR SUBWAITTX
0374                         
0375 e0cf 86 31              	LDA #'1'
0376 e0d1 bd e1 65           	JSR SUBWAITTX
0377                         
0378 e0d4 86 6d              	LDA #'m'
0379 e0d6 bd e1 65           	JSR SUBWAITTX
0380                         
0381 e0d9 86 48              	LDA #'H'
0382 e0db bd e1 65           	JSR SUBWAITTX
0383                         
0384 e0de 86 65              	LDA #'e'
0385 e0e0 bd e1 65           	JSR SUBWAITTX
0386                         
0387 e0e3 86 6c              	LDA #'l'
0388 e0e5 bd e1 65           	JSR SUBWAITTX
0389                         
0390                         
0391 e0e8 86 6c              	LDA #'l'
0392 e0ea bd e1 65           	JSR SUBWAITTX
0393                         
0394 e0ed 86 6f              	LDA #'o'
0395 e0ef bd e1 65           	JSR SUBWAITTX
0396                         
0397                         
0398 e0f2 86 1b              	LDA #27
0399 e0f4 bd e1 65           	JSR SUBWAITTX
0400                         
0401 e0f7 86 5b              	LDA #'['
0402 e0f9 bd e1 65           	JSR SUBWAITTX
0403                         
0404 e0fc 86 6d              	LDA #'m'
0405 e0fe bd e1 65           	JSR SUBWAITTX
0406                         
0407 e101 86 20              	LDA #' '
0408 e103 bd e1 65           	JSR SUBWAITTX
0409                         
0410 e106 86 20              	LDA #' '
0411 e108 bd e1 65           	JSR SUBWAITTX
0412                         
0413 e10b 86 48              	LDA #'H'
0414 e10d bd e1 65           	JSR SUBWAITTX
0415                         
0416 e110 86 65              	LDA #'e'
0417 e112 bd e1 65           	JSR SUBWAITTX
0418                         
0419 e115 86 6c              	LDA #'l'
0420 e117 bd e1 65           	JSR SUBWAITTX
0421                         
0422                         
0423 e11a 86 6c              	LDA #'l'
0424 e11c bd e1 65           	JSR SUBWAITTX
0425                         
0426 e11f 86 6f              	LDA #'o'
0427 e121 bd e1 65           	JSR SUBWAITTX
0428                         
0429 e124 86 23              	LDA #'#'
0430 e126 bd e1 65           	JSR SUBWAITTX
0431                         
0432                         
0433 e129 bd e2 25           	JSR	SUB3
0434                         
0435 e12c 86 3a              	LDA #':'
0436 e12e bd e1 65           	JSR SUBWAITTX
0437                         
0438                         
0439                         *	get  key
0440                         *
0441                         *	LDA $FFD0
0442                         *	anda #$0F
0443                         *	adda #$30
0444                         *	sta $FFD1
0445                         *
0446                         
0447                         * block for  key press returns charater in A
0448 e131 bd e1 5a           	JSR SUB_WAIT_RX
0449                         
0450 e134 b7 ff d1           	sta $FFD1
0451                         *	JSR SUBWAITTX
0452                         
0453                         	
0454                         *	
0455                         * print out string selected by key pressed
0456 e137 bd e1 c9           	JSR	SUB3_pick
0457                         *	JSR SUB4
0458                         
0459                         * tidy up.
0460 e13a bd e2 25           	JSR	SUB3
0461                         
0462 e13d 7e e0 59           	JMP LOOPA
0463                         	
0464                         LOOPA_1
0465 e140 7e e0 59           	JMP LOOPA
0466                         	
0467 e143 ec 91              	ldd	[,x++]
0468                         	
0469 e145 86 41              	lda	#$41
0470 e147 a7 91              	sta [,x++]
0471 e149 ec 91              	ldd	[,x++]
0472                         
0473 e14b 86 42              	lda	#$42
0474 e14d a7 91              	sta [,x++]
0475 e14f ec 91              	ldd	[,x++]
0476                         	
0477 e151 86 03              	lda	#$3
0478 e153 a7 91              	sta [,x++]
0479 e155 ec 91              	ldd	[,x++]
0480                         	
0481 e157 7e e0 00           	JMP INIT
0482                         
0483                         
0484                         loop 
0485                         
0486                         
0487                         **************************************************
0488                         * SEC 1.0 subroutine to wit for character from UART
0489                         **************************************************
0490                         SUB_WAIT_RX
0491                         
0492                         * block for  key press
0493                         SUB_WAIT_RX_LOOPA
0494                         	; check if key board had character
0495 e15a b6 ff d0           	LDA $FFD0
0496 e15d 84 01              	anda #$01
0497 e15f 27 f9              	beq	SUB_WAIT_RX_LOOPA
0498                         	; read new character 
0499 e161 b6 ff d1           	LDA	$FFD1
0500 e164 39                 	RTS
0501                         
0502                         
0503                         
0504                         **************************************************
0505                         * SEC 1.0 subroutine to print A to UART
0506                         **************************************************
0507                         
0508                         SUBWAITTX
0509                         *	store A to UART 
0510 e165 b7 ff d1           	STA $FFD1
0511                         *	rts
0512                         * try and wait for the TX buffer to empty
0513                         WAITTX
0514 e168 b6 ff d0           	LDA $FFD0
0515 e16b 84 02              	ANDA #$02
0516 e16d 27 f9              	BEQ	 WAITTX
0517                         
0518 e16f 12                 	nop
0519 e170 39                 	RTS 
0520                         
0521                         	
0522                         *************************************************
0523                         * sec 1.0 Main Loop
0524                         *************************************************	
0525                         	
0526                         LOOP	
0527                         		
0528 e171 bd e1 8b           	JSR	SUB1
0529 e174 bd e1 8f           	JSR	SUB2
0530                         
0531 e177 12                 	NOP
0532 e178 7e e1 71           	JMP LOOP
0533                         	
0534                         
0535                         
0536                         *************************************************
0537                         * sec 1.0 Interupt routines
0538                         *************************************************	
0539                         
0540                         	
0541                         SWI2rtn
0542 e17b 12                 	NOP
0543 e17c 3b                 	RTI
0544                         	
0545                         SWI3rtn
0546 e17d 12                 	NOP
0547 e17e 3b                 	RTI
0548                         
0549                         FIRQrtn
0550 e17f 12                 	NOP
0551 e180 3b                 	RTI
0552                         		
0553                         IRQrtn
0554 e181 12                 	NOP
0555 e182 3b                 	RTI
0556                         	
0557                         SWIrtn
0558 e183 12                 	NOP
0559 e184 3b                 	RTI
0560                         
0561                         NMIrtn
0562 e185 12                 	NOP
0563 e186 3b                 	RTI
0564                         
0565                         RESETrtn
0566 e187 7e e0 00           	JMP INIT
0567 e18a 3b                 	RTI
0568                         
0569                         
0570                         
0571                         *************************************************
0572                         * sec 1.0 subroutines
0573                         *************************************************	
0574                         
0575                         
0576                         SUB1
0577 e18b 12                 	nop
0578                         	
0579                         *	*** Software interupt	
0580 e18c 3f                 	SWI
0581 e18d 12                 	nop
0582 e18e 39                 	rts
0583                         	
0584                         	
0585                         *************************************************
0586                         * sec 1.0 Learn about some commands
0587                         *************************************************	
0588                         	
0589                         SUB2
0590                         
0591 e18f 12                 	nop
0592 e190 86 20              	LDA #$20
0593 e192 8e 03 00           	LDX #$0300
0594                         	
0595 e195 86 20              	lda	#$20
0596 e197 ec 91              	ldd	[,x++]
0597                         	
0598 e199 86 41              	lda	#$41
0599 e19b ec 91              	ldd	[,x++]
0600                         
0601 e19d 86 42              	lda	#$42
0602 e19f ec 91              	ldd	[,x++]
0603                         	
0604 e1a1 86 03              	lda	#$3
0605 e1a3 ec 91              	ldd	[,x++]
0606                         
0607 e1a5 12                 	nop
0608                         	
0609 e1a6 86 20              	LDA #$20
0610 e1a8 8e f0 00           	LDX #$f000
0611                         *	ldy #CAT
0612                         
0613 e1ab 30 0a              	leax	10,x	; add 10 to X
0614 e1ad 30 89 01 f4        	leax	500,x	; add 500 to x
0615 e1b1 31 a6              	leay	a,y		; add a to y
0616 e1b3 31 ab              	leay	d,y		; add D to y
0617 e1b5 33 56              	leau	-10,u	; add -10 to u
0618 e1b7 32 76              	leas	-10,s
0619 e1b9 32 6a              	leas	10,s
0620 e1bb 30 65              	leax	5,s
0621                         
0622 e1bd 86 20              	lda	#$20
0623                         	
0624 e1bf ec 91              	ldd	[,x++]
0625 e1c1 ec 91              	ldd	[,x++]
0626 e1c3 ec 91              	ldd	[,x++]
0627 e1c5 ec 91              	ldd	[,x++]
0628                         	
0629 e1c7 12                 	nop
0630 e1c8 39                 	rts
0631                         
0632                         
0633                         *************************************************
0634                         * sec 1.0 subroutines - 
0635                         *************************************************	
0636                         *
0637                         * use character in A to pick string to display.
0638                         *
0639                         *
0640                         SUB3_pick
0641                         * test A and jmp
0642 e1c9 81 31              	CMPA	#'1'
0643 e1cb 27 40              	BEQ		SUB3_set1	
0644                         
0645 e1cd 81 32              	CMPA	#'2'
0646 e1cf 27 42              	BEQ		SUB3_set2	
0647                         
0648 e1d1 81 33              	CMPA	#'3'
0649 e1d3 27 44              	BEQ		SUB3_set3
0650                         
0651 e1d5 81 34              	CMPA	#'4'
0652 e1d7 27 46              	BEQ		SUB3_set4
0653                         
0654                         
0655                         
0656                         * preload X then compare.
0657 e1d9 8e e2 e9           	LDX		#MSG5
0658 e1dc 81 35              	CMPA	#'5'
0659 e1de 27 48              	BEQ		SUB3a
0660                         
0661 e1e0 8e e3 04           	LDX		#MSG6
0662 e1e3 81 36              	CMPA	#'6'
0663 e1e5 27 41              	BEQ		SUB3a
0664                         
0665 e1e7 8e e3 1f           	LDX		#MSG7
0666 e1ea 81 37              	CMPA	#'7'
0667 e1ec 27 3a              	BEQ		SUB3a
0668                         
0669 e1ee 8e e3 3a           	LDX		#MSG8
0670 e1f1 81 38              	CMPA	#'8'
0671 e1f3 27 33              	BEQ		SUB3a
0672                         
0673                         
0674 e1f5 8e e3 55           	LDX		#MSG9
0675 e1f8 81 39              	CMPA	#'9'
0676 e1fa 27 2c              	BEQ		SUB3a
0677                         
0678                         
0679                         
0680 e1fc 8e e3 70           	LDX		#MSG10
0681 e1ff 81 30              	CMPA	#'0'
0682 e201 27 25              	BEQ		SUB3a
0683                         
0684                         
0685                         
0686 e203 8e e3 8b           	LDX		#MSG11
0687 e206 81 2d              	CMPA	#'-'
0688 e208 27 1e              	BEQ		SUB3a
0689                         
0690                         
0691                          
0692 e20a 7e e2 25           	jmp 	SUB3
0693                         
0694                         
0695                         
0696                         SUB3_set1
0697 e20d 8e e2 92           	LDX		#MSG1
0698 e210 7e e2 28           	jmp 	SUB3a
0699                         
0700                         SUB3_set2
0701 e213 8e e2 a6           	LDX		#MSG2
0702 e216 7e e2 28           	jmp 	SUB3a
0703                         
0704                         SUB3_set3
0705 e219 8e e2 ba           	LDX		#MSG3
0706 e21c 7e e2 28           	jmp 	SUB3a
0707                         
0708                         SUB3_set4
0709 e21f 8e e2 d1           	LDX		#MSG4
0710 e222 7e e2 28           	jmp 	SUB3a
0711                         
0712                         SUB3
0713                         * test
0714                         
0715                         *	; print out string
0716 e225 8e e2 80           	LDX		#MSG0
0717                         
0718                         *	get character pointed to by X and write to UART, end if \0 found
0719                         SUB3a	
0720 e228 a6 80              	lda		,x+
0721 e22a 84 ff              	anda	#$FF
0722 e22c 27 06              	beq		SUB3b
0723                         *	STA 	$FFD1
0724 e22e bd e1 65           	JSR SUBWAITTX
0725 e231 7e e2 28           	jmp		SUB3a
0726                         	
0727                         SUB3b
0728 e234 39                 	RTS
0729                         
0730                         
0731                         *************************************************
0732                         * sec 1.0 subroutines - 
0733                         *************************************************	
0734                         *
0735                         * use character in A to pick string to display.
0736                         * does not work!
0737                         *
0738                         
0739                         SUB4
0740                         * --- not working yet ---
0741                         * A holds choice,
0742                         * look up 
0743 e235 8e e2 71           	LDX		#MSG_table
0744 e238 c6 20              	LDB 	#' '
0745 e23a f7 ff d1           	STB $FFD1
0746 e23d ec 84              	LDD		,X
0747 e23f f7 ff d1           	STB $FFD1
0748 e242 b7 ff d1           	STA $FFD1
0749 e245 c6 7d              	LDB 	#'}'
0750 e247 f7 ff d1           	STB $FFD1
0751 e24a c6 61              	LDB 	#'a'
0752 e24c f7 ff d1           	STB $FFD1
0753 e24f c6 7c              	LDB 	#'|'
0754 e251 f7 ff d1           	STB $FFD1
0755                         	
0756                         SUB4_loop 	
0757 e254 a1 94              	CMPA	[,x]
0758 e256 27 09              	BEQ		SUB4_found
0759 e258 31 91              	LEAY	[,x++]
0760                         
0761                         *	LDA 	#'}'
0762 e25a b7 ff d1           	STA $FFD1
0763                         
0764 e25d 39                 	RTS	
0765 e25e 7e e2 54           	JMP		SUB4_loop
0766                         	
0767                         
0768                         SUB4_found
0769                         	
0770 e261 86 3e              	LDA		#'>'
0771 e263 bd e1 c9           	JSR SUB3_pick
0772                         
0773                         * FOUND and X points to address of message. 
0774                         
0775 e266 30 84              	LEAX	,x 
0776 e268 7e e2 28           	jmp		SUB3a
0777                         	
0778                         	
0779                         SUB4_notfound
0780 e26b 96 3e              	LDA '>'
0781 e26d b7 ff d1           	STA $FFD1	
0782 e270 39                 	rts
0783                         	
0784                         	
0785                         MSG_table
0786 e271 41                 	FCB	'A'
0787 e272 e2 92              	FDB MSG1
0788 e274 42                 	FCB	'B'
0789 e275 e2 a6              	FDB MSG2
0790 e277 43                 	FCB	'C'
0791 e278 e2 ba              	FDB MSG3
0792 e27a 44                 	FCB	'D'
0793 e27b e2 d1              	FDB MSG4
0794 e27d 00                 	FCB 0
0795 e27e 00 00              	FDB 0
0796                         
0797                         *************************************************
0798                         * sec 1.0 some ANSII escapes for rs232 display - 
0799                         *************************************************	
0800                         *
0801                         * use character in A to pick string to display.
0802                         *
0803                         *
0804                         * ANSI
0805                         *
0806                         * 3x,4x,9x,10x
0807                         * 3x 	dim foreground colours
0808                         * 4x 	dim background colours
0809                         * 9x 	bright foreground colours 
0810                         * 10x 	Bright background colours
0811                         *
0812                         * 30    black
0813                         * 31	red
0814                         * 32	green
0815                         * 33	yellow
0816                         * 34	blue
0817                         * 35	magenta
0818                         * 36	cyan
0819                         * 37	white
0820                         
0821                         *************************************************
0822                         * sec 1.0 some Strings 
0823                         *************************************************	
0824                         
0825                         *
0826                         * as9 does not recognise \r and \n in strings
0827                         * as9 does not recognise FCN 
0828                         *
0829                         
0830                         
0831                         * esc [ m and string with Null terminated  
0832                         MSG0
0833 e280 1b                 	FCB	$1B	
0834                         *	FCC "[m            \r\n"
0835 e281 5b 6d 20 20 20 20  	FCC "[m            "
     20 20 20 20 20 20
     20 20
0836 e28f 0a                 	FCB $0A
0837 e290 0d                 	FCB $0D
0838                         
0839 e291 00                 	FCB 0
0840                         
0841                         MSG1	
0842 e292 1b                 	FCB	$1B
0843 e293 5b 39 31 6d 20 2e  	FCC "[91m . -- stop -- "
     20 2d 2d 20 73 74
     6f 70 20 2d 2d 20
0844 e2a5 00                 	FCB 0
0845                         
0846                         MSG2	
0847 e2a6 1b                 	FCB	$1B
0848 e2a7 5b 39 32 6d 20 2a  	FCC "[92m * ==start==  "
     20 3d 3d 73 74 61
     72 74 3d 3d 20 20
0849 e2b9 00                 	FCB 0
0850                         
0851                         MSG3
0852 e2ba 1b                 	FCB	$1B
0853 e2bb 5b 39 33 6d 20 2e  	FCC "[93m . -- warning -- "
     20 2d 2d 20 77 61
     72 6e 69 6e 67 20
     2d 2d 20
0854 e2d0 00                 	FCB 0
0855                         	
0856                         MSG4	
0857 e2d1 1b                 	FCB	$1B
0858 e2d2 5b 31 30 33 6d 20  	FCC "[103m ~ ~ Running ~ ~ "
     7e 20 7e 20 52 75
     6e 6e 69 6e 67 20
     7e 20 7e 20
0859 e2e8 00                 	FCB 0
0860                         
0861                         MSG5	
0862 e2e9 1b                 	FCB	$1B
0863 e2ea 5b 34 31 6d 20 7e  	FCC "[41m ~ ~ 41m message ~ ~ "
     20 7e 20 34 31 6d
     20 6d 65 73 73 61
     67 65 20 7e 20 7e
     20
0864 e303 00                 	FCB 0
0865                         
0866                         MSG6	
0867 e304 1b                 	FCB	$1B
0868 e305 5b 34 32 6d 20 7e  	FCC "[42m ~ ~ 42m x x x x ~ ~ "
     20 7e 20 34 32 6d
     20 78 20 78 20 78
     20 78 20 7e 20 7e
     20
0869 e31e 00                 	FCB 0
0870                         
0871                         MSG7	
0872 e31f 1b                 	FCB	$1B
0873 e320 5b 34 33 6d 20 7e  	FCC "[43m ~ ~ 43m x x x x ~ ~ "
     20 7e 20 34 33 6d
     20 78 20 78 20 78
     20 78 20 7e 20 7e
     20
0874 e339 00                 	FCB 0
0875                         
0876                         MSG8	
0877 e33a 1b                 	FCB	$1B
0878 e33b 5b 34 34 6d 20 7e  	FCC "[44m ~ ~ 44m x x x x ~ ~ "
     20 7e 20 34 34 6d
     20 78 20 78 20 78
     20 78 20 7e 20 7e
     20
0879 e354 00                 	FCB 0
0880                         
0881                         MSG9	
0882 e355 1b                 	FCB	$1B
0883 e356 5b 34 35 6d 20 7e  	FCC "[45m ~ ~ 45m x x x x ~ ~ "
     20 7e 20 34 35 6d
     20 78 20 78 20 78
     20 78 20 7e 20 7e
     20
0884 e36f 00                 	FCB 0
0885                         
0886                         MSG10	
0887 e370 1b                 	FCB	$1B
0888 e371 5b 34 36 6d 20 7e  	FCC "[46m ~ ~ 46m x x x x ~ ~ "
     20 7e 20 34 36 6d
     20 78 20 78 20 78
     20 78 20 7e 20 7e
     20
0889 e38a 00                 	FCB 0
0890                         
0891                         MSG11	
0892 e38b 1b                 	FCB	$1B
0893 e38c 5b 34 37 6d 20 7e  	FCC "[47m ~ ~ 47m x x x x ~ ~ "
     20 7e 20 34 37 6d
     20 78 20 78 20 78
     20 78 20 7e 20 7e
     20
0894 e3a5 00                 	FCB 0
0895                         
0896                         MSG12	
0897 e3a6 0a                 	FCB $0A
0898 e3a7 0d                 	FCB $0D
0899 e3a8 1b                 	FCB	$1B
0900 e3a9 5b 31 30 34 6d 20  	FCC "[104m  - - - 6809 - - - - "
     20 2d 20 2d 20 2d
     20 36 38 30 39 20
     2d 20 2d 20 2d 20
     2d 20
0901                         
0902 e3c3 1b                 	FCB	$1B
0903 e3c4 5b 30 6d 20        	FCC "[0m "
0904                         
0905 e3c8 1b                 	FCB	$1B
0906 e3c9 5b 31 30 30 6d 50  	FCC "[100mPress: 1..0:"
     72 65 73 73 3a 20
     31 2e 2e 30 3a
0907                         
0908 e3da 1b                 	FCB	$1B
0909 e3db 5b 30 6d           	FCC "[0m"
0910 e3de 00                 	FCB 0
0911                         
0912                         *************************************************
0913                         * sec 1.0 subroutines
0914                         *************************************************	
0915                         
